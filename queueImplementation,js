class Queue {
  constructor() {
    this.items = [];
  }

  //add an element to the queue
  enqueue = (element) => {
    this.items.push(element);
  };

  //remove an element from the queue
  dequeue = () => {
    !this.isEmpty() ? this.items.shift() : console.log('Queue is empty');
  };

  //check if the queue is empty
  isEmpty = () => {
    return this.items.length == 0;
  };

  //view the last element from the queue
  peek = () => {
    return !this.isEmpty()
      ? this.items[this.items.length - 1]
      : console.log('Queue is empty');
  };

  //view the first element from the queue
  front = () => {
    return !this.isEmpty() ? this.items[0] : console.log('Queue is empty');
  };

  //view the size of the queue
  size = () => {
    return this.items.length;
  };
}

let queue = new Queue();
queue.enqueue(1);
queue.enqueue(2);
queue.enqueue(3);
queue.enqueue(4);
console.log(queue.items);
queue.dequeue();
console.log(queue.items);
console.log(queue.peek());
console.log(queue.front());
console.log(queue.size());
